var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = KuMo","category":"page"},{"location":"#KuMo","page":"Home","title":"KuMo","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for KuMo.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [KuMo]","category":"page"},{"location":"#KuMo.AbstractAlgorithm","page":"Home","title":"KuMo.AbstractAlgorithm","text":"AbstractAlgorithm\n\nAn abstract supertype for algorithms.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.AbstractJob","page":"Home","title":"KuMo.AbstractJob","text":"AbstractJob\n\nAn abstract supertype for jobs.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.AbstractRequest","page":"Home","title":"KuMo.AbstractRequest","text":"AbstractRequests\n\nAn abstract supertype for job requests.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.AbstractResource","page":"Home","title":"KuMo.AbstractResource","text":"AbstractResource\n\nAn abstract supertype for resources in a cloud morphing architecture. Any type MyResource <: AbstractResource needs to either:\n\nhave a field capacity::T where T <: Number,\nimplement a capacity(r::MyResource) method.\n\nOptionally, one can implement a specific pseudo_cost(r::MyResource, charge) method.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.AdditiveNode","page":"Home","title":"KuMo.AdditiveNode","text":"AdditiveNode{T1 <: Number, T2 <: Number} <: AbstractNode\n\nA node structure where the default pseudo-cost is translated by the value in the param field.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.ConvexLink","page":"Home","title":"KuMo.ConvexLink","text":"ConvexLink <: KuMo.AbstractLink\n\nLink structure with a convex pseudo-cost function.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.Data","page":"Home","title":"KuMo.Data","text":"Data\n\nStructure to store the information related to some Data. Currently, only the location of such data is stored.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.DirectedTopology","page":"Home","title":"KuMo.DirectedTopology","text":"DirectedTopology{N<:AbstractNode,L<:AbstractLink}\n\nA structure to store the topology of a network. Beside the graph structure itself, it also stores the kinds of all nodes and links.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.EqualLoadBalancingNode","page":"Home","title":"KuMo.EqualLoadBalancingNode","text":"EqualLoadBalancingNode{T <: Number} <: AbstractNode\n\nNode structure with an equal load balancing (monotonic) pseudo-cost function.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.FlatLink","page":"Home","title":"KuMo.FlatLink","text":"FlatLink <: KuMo.AbstractLink\n\nLink structure with a constant pseudo-cost function.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.FlatNode","page":"Home","title":"KuMo.FlatNode","text":"FlatNode{T <: Number} <: AbstractNode\n\nNode structure with a constant pseudo-cost function.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.FreeLink","page":"Home","title":"KuMo.FreeLink","text":"FreeLink <: AbstractLink\n\nThe pseudo-cost of such links is always zero.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.IdleStateNode","page":"Home","title":"KuMo.IdleStateNode","text":"IdleStateNode{T1 <: Number, T2 <: Number} <: AbstractNode\n\nNode structure that stays iddle until a bigger system load than the default node. The param field is used to set the activation threshold.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.Job","page":"Home","title":"KuMo.Job","text":"Job <: AbstractJob\n\nThe most generic job type.\n\nArguments:\n\nbackend::Int: size of the backend data to be sent from data location to the server\ncontainers::Int: number of containers required to execute the job\nduration::Float64: job duration\nfrontend::Int: size of the frontend data to be sent from the user location to the server\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.Link","page":"Home","title":"KuMo.Link","text":"Link{T <: Number} <: AbstractLink\n\nDefault link structure with an equal load balancing (monotonic) pseudo-cost function.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.MultiplicativeNode","page":"Home","title":"KuMo.MultiplicativeNode","text":"MultiplicativeNode{T1 <: Number, T2 <: Number} <: AbstractNode\n\nA node structure where the default pseudo-cost is multiplied by the value in the param field.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.Node","page":"Home","title":"KuMo.Node","text":"Node{T <: Number} <: AbstractNode\n\nDefault node structure, defined by its maximal capacity and the default convex pseudo-cost function.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.PremiumNode","page":"Home","title":"KuMo.PremiumNode","text":"PremiumNode{T1 <: Number, T2 <: Number} <: AbstractNode\n\nA node structure for premium resources. The param field set the premium threshold.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.ShortestPath","page":"Home","title":"KuMo.ShortestPath","text":"ShortestPath <: AbstractAlgorithm\n\nA ShortestPath algorithm.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.SnapShot","page":"Home","title":"KuMo.SnapShot","text":"SnapShot\n\nA structure to take snapshot from the state of network and its resources at a specific instant.\n\nArguments:\n\nstate::State: state at instant\ntotal::Float64: total load at instant\nselected::Int: selected node at instant; value is zero if load is removed\nduration::Float64: duration of all the actions taken during corresponding to the state of this snap\nsolving_time::Float64: time taken specifically by the solving algorithm (<: AbstractAlgorithm)\ninstant::Float64\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.State","page":"Home","title":"KuMo.State","text":"State\n\nA structure to store the state of the different resources, e.g. nodes and links, during a simulation.\n\nArguments:\n\nlinks::SparseMatrixCSC{Float64, Int64}: sparse matrice with the links loads\nnodes::SparseVector{Float64, Int64}: sparse vector with the nodes loads\nState(n): inner constructor given the number of nodes n\nState(links, nodes): inner constructor given the links and nodes of an existing state\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.Topology","page":"Home","title":"KuMo.Topology","text":"Topology{N<:AbstractNode,L<:AbstractLink}\n\nA structure to store the topology of a network. Beside the graph structure itself, it also stores the kinds of all nodes and links.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.User","page":"Home","title":"KuMo.User","text":"User{R<:AbstractRequests}\n\nA structure to store a user information. A user is defined as a location (node id).\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.add_load!-Tuple{KuMo.State, Vararg{Any, 5}}","page":"Home","title":"KuMo.add_load!","text":"add_load!(state, links, containers, v, n)\n\nAdds load to a given state.\n\nArguments:\n\nstate\nlinks: the load increase to be added on links\ncontainers: the containers load to be added to v\nv: node selected to execute a task\nn: amount of available nodes\n\n\n\n\n\n","category":"method"},{"location":"#KuMo.capacity-Tuple{R} where R<:KuMo.AbstractResource","page":"Home","title":"KuMo.capacity","text":"capacity(r::R) where {R<:AbstractResource}\n\nReturn the capacity of a resource r.\n\n\n\n\n\n","category":"method"},{"location":"#KuMo.clean-Tuple{Any}","page":"Home","title":"KuMo.clean","text":"clean(snaps)\n\nClean the snapshots by merging snaps occurring at the same time.\n\n\n\n\n\n","category":"method"},{"location":"#KuMo.cond_minmax-Tuple{Any, Any, Any}","page":"Home","title":"KuMo.cond_minmax","text":"cond_minmax(x, y, b)\n\nReturn the min of x and y if b is false, and the max of x and y otherwise.\n\n\n\n\n\n","category":"method"},{"location":"#KuMo.data-Tuple{Int64}","page":"Home","title":"KuMo.data","text":"data(location)\n\nConstruct data at location. If the location is a collection, a random location is chosen.\n\n\n\n\n\n","category":"method"},{"location":"#KuMo.execution_results-Tuple{BatchSimulation, Any, Any, Any}","page":"Home","title":"KuMo.execution_results","text":"post_simulate(s, snapshots, verbose, output)\n\nPost-simulation process that covers cleaning the snapshots and producing an output.\n\nArguments:\n\ns: simulated scenario\nsnapshots: resulting snapshots (before cleaning)\nverbose: if set to true, prints information about the output and the snapshots\noutput: output path\n\n\n\n\n\n","category":"method"},{"location":"#KuMo.execution_results-Tuple{InteractiveRun, Any, Any, Any}","page":"Home","title":"KuMo.execution_results","text":"post_simulate(s, snapshots, verbose, output)\n\nPost-simulation process that covers cleaning the snapshots and producing an output.\n\nArguments:\n\ns: simulated scenario\nsnapshots: resulting snapshots (before cleaning)\nverbose: if set to true, prints information about the output and the snapshots\noutput: output path\n\n\n\n\n\n","category":"method"},{"location":"#KuMo.graph-Tuple{KuMo.AbstractTopology, Any}","page":"Home","title":"KuMo.graph","text":"graph(topo::Topology, algorithm::AbstractAlgorithm)\n\nCreates an appropriate digraph using Graph.jl based on a topology and the requirement of an algorithm.\n\n\n\n\n\n","category":"method"},{"location":"#KuMo.init_execution-Tuple{BatchSimulation}","page":"Home","title":"KuMo.init_execution","text":"init_execution(::BatchSimulation)\n\nInitialize a synchronous batch simulation.\n\n\n\n\n\n","category":"method"},{"location":"#KuMo.init_execution-Tuple{InteractiveRun}","page":"Home","title":"KuMo.init_execution","text":"init_execution(::InteractiveRun)\n\nInitialize an interactive run.\n\n\n\n\n\n","category":"method"},{"location":"#KuMo.inner_queue","page":"Home","title":"KuMo.inner_queue","text":"inner_queue(g, u, j, nodes, capacities, state, ::ShortestPath, ii = 0; lck = ReentrantLock(), demands = nothing, links)\n\nDOCSTRING\n\nArguments:\n\ng: a graph representing the topology of the network\nu: user location\nj: requested job\nnodes: nodes capacities\ncapacities: links capacities\nstate: current state of the network\nalgo: ShortestPath <: AbstractAlgorithm\nii: a counter to measure the progress in the simulation\nlck: a lck for asynchronous simulation\ndemands: not needed for ShortestPath algorithm\nlinks: description of the links topology\n\n\n\n\n\n","category":"function"},{"location":"#KuMo.insert_sorted!","page":"Home","title":"KuMo.insert_sorted!","text":"insert_sorted!(w, val, it = iterate(w))\n\nInsert element in a sorted collection.\n\nArguments:\n\nw: sorted collection\nval: value to be inserted\nit: optional iterator\n\n\n\n\n\n","category":"function"},{"location":"#KuMo.job-Tuple","page":"Home","title":"KuMo.job","text":"job(backend::Int, containers::Int, data_location::Int, duration::Float64, frontend::Int)\n\nMethod to create new jobs.\n\n\n\n\n\n","category":"method"},{"location":"#KuMo.job_distributions-Tuple{}","page":"Home","title":"KuMo.job_distributions","text":"job_distributions(; backend, container, data_locations, duration, frontend)\n\nConstruct a dictionary with random distributions to generate new jobs. Beside data_locations, the other arguments should be a 2-tuple defining normal distributions as in the Distributions.jl package.\n\nArguments:\n\nbackend\ncontainer\ndata_locations: a collection/range of possible data location\nduration\nfrontend\n\n\n\n\n\n","category":"method"},{"location":"#KuMo.make_df-Tuple{Vector{KuMo.SnapShot}, Any}","page":"Home","title":"KuMo.make_df","text":"make_df(snapshots::Vector{SnapShot}, topo; verbose = true)\n\nMake a DataFrame from the raw snapshots.\n\nArguments:\n\nsnapshots: A collection of snapshots\ntopo: topology of the network\nverbose: if set to true, it will print a description of the snapshots in the terminal\n\n\n\n\n\n","category":"method"},{"location":"#KuMo.marks-Tuple{Any}","page":"Home","title":"KuMo.marks","text":"marks(df::DataFrame)\n\nReturns a 4-tuple (a, b, c, d) that marks the start and end of the nodes and links columns in the dataframe.\n\n(a, b) mark the start and end indices of the nodes columns\n(c, d) mark the start and end indices of the links columns\n\n\n\n\n\n","category":"method"},{"location":"#KuMo.param-Tuple{R} where R<:KuMo.AbstractResource","page":"Home","title":"KuMo.param","text":"param(r::R) where {R<:AbstractResource}\n\nDefault accessor for an optional parameter for R. If no param field exists, returns nothing.\n\n\n\n\n\n","category":"method"},{"location":"#KuMo.pseudo_cost","page":"Home","title":"KuMo.pseudo_cost","text":"pseudo_cost(cap, charge, resource, param...)\npseudo_cost(r::<:AbstractResource, charge)\n\nMethods to compute the pseudo-cost of various resources.\n\n\n\n\n\n","category":"function"},{"location":"#KuMo.pseudo_cost-Union{Tuple{R}, Tuple{R, Any}} where R<:KuMo.AbstractResource","page":"Home","title":"KuMo.pseudo_cost","text":"pseudo_cost(r::R, charge) where {R<:AbstractResource}\n\nCompute the pseudo-cost of r given its charge.\n\n\n\n\n\n","category":"method"},{"location":"#KuMo.push_snap!-NTuple{8, Any}","page":"Home","title":"KuMo.push_snap!","text":"push_snap!(snapshots, state, total, selected, duration, solving_time, instant, n)\n\nAdd a snapshot to an existing collection of snapshots.\n\nArguments:\n\nsnapshots: collection of snapshots\nstate: current state\ntotal: load\nselected: node where a request is executed\nduration: duration of the whole resource allocation for the request\nsolving_time: time taken specifically by the solving algorithm (<: AbstractAlgorithm)\ninstant: instant when the request is received\nn: number of available nodes\n\n\n\n\n\n","category":"method"},{"location":"#KuMo.rand_job-Tuple{Any}","page":"Home","title":"KuMo.rand_job","text":"rand_job(jd::Dict)\n\nCreate a random job given a job_distribution dictionary.\n\n\n\n\n\n","category":"method"},{"location":"#KuMo.rem_load!-NTuple{6, Any}","page":"Home","title":"KuMo.rem_load!","text":"rem_load!(state, links, containers, v, n)\n\nRemoves load from a given state.\n\nArguments:\n\nstate\nlinks: the load increase to be removed from links\ncontainers: the containers load to be removed from v\nv: node where a task is endind\nn: amount of available nodes\n\n\n\n\n\n","category":"method"},{"location":"#KuMo.retrieve_path-Tuple{Any, Any, Any}","page":"Home","title":"KuMo.retrieve_path","text":"retrieve_path(u, v, paths)\n\nRetrieves the path from u to v.\n\nArguments:\n\nu: source vertex\nv: target vertex\npaths: list of shortest paths within a network\n\n\n\n\n\n","category":"method"},{"location":"#KuMo.user-Tuple{Int64}","page":"Home","title":"KuMo.user","text":"user(location)\n\nConstruct a user at location. If the location is a collection, a random location is chosen.\n\n\n\n\n\n","category":"method"},{"location":"#KuMo.valid_load","page":"Home","title":"KuMo.valid_load","text":"valid_load(s, task, g, capacities, state, algo, demands, ii = 0)\n\nCompute the best load allocation and return if it is a valid one.\n\nArguments:\n\ns: scenario being simulated\ntask: task being requested\ng: graph of the network topology\ncapacities: capacities of the network\nstate: current state of resources\nalgo: algo used for computing the best allocation cost\ndemands: if algo is KuMoFlowExt.MinCostFlow, demands are required\nii: a counter to measure the approximative progress of the simulation\n\n\n\n\n\n","category":"function"},{"location":"#KuMo.vtx-Tuple{Any}","page":"Home","title":"KuMo.vtx","text":"vtx(algorithm::AbstractAlgorithm)\n\nReturn the number of additional vertices required by the algorithm used to allocate resources in the network.\n\n\n\n\n\n","category":"method"}]
}
