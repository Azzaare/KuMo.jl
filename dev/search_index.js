var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = KuMo","category":"page"},{"location":"#KuMo","page":"Home","title":"KuMo","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for KuMo.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [KuMo]","category":"page"},{"location":"#KuMo.AbstractAlgorithm","page":"Home","title":"KuMo.AbstractAlgorithm","text":"AbstractAlgorithm\n\nAn abstract supertype for algorithms.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.AbstractJob","page":"Home","title":"KuMo.AbstractJob","text":"AbstractJob\n\nAn abstract supertype for jobs.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.AbstractRequests","page":"Home","title":"KuMo.AbstractRequests","text":"AbstractRequests\n\nAn abstract supertype for job requests.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.AbstractResource","page":"Home","title":"KuMo.AbstractResource","text":"AbstractResource\n\nAn abstract supertype for resources in a cloud morphing architecture. Any type MyResource <: AbstractResource needs to either:\n\nhave a field capacity::T where T <: Number,\nimplement a capacity(r::MyResource) method.\n\nOptionally, one can implement a specific pseudo_cost(r::MyResource, charge) method.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.Data","page":"Home","title":"KuMo.Data","text":"Data\n\nStructure to store the information related to some Data. Currently, only the location of such data is stored.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.Job","page":"Home","title":"KuMo.Job","text":"Job <: AbstractJob\n\nThe most generic job type.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.MinCostFlow","page":"Home","title":"KuMo.MinCostFlow","text":"MinCostFlow{O<:MathOptInterface.AbstractOptimizer} <: AbstractAlgorithm\n\nA structure to construct a MinCostFlow algorithm associated with an NLP Optimizer, such as Ipopt.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.ShortestPath","page":"Home","title":"KuMo.ShortestPath","text":"ShortestPath <: AbstractAlgorithm\n\nA ShortestPath algorithm.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.Topology","page":"Home","title":"KuMo.Topology","text":"Topology{N<:AbstractNode,L<:AbstractLink}\n\nA structure to store the topology of a network. Beside the graph structure itself, it also stores the kinds of all nodes and links.\n\n\n\n\n\n","category":"type"},{"location":"#KuMo.graph-Tuple{KuMo.Topology, Any}","page":"Home","title":"KuMo.graph","text":"graph(topo::Topology, algorithm::AbstractAlgorithm)\n\nCreates an appropriate digraph using Graph.jl based on a topology and the requirement of an algorithm.\n\n\n\n\n\n","category":"method"},{"location":"#KuMo.job-Tuple","page":"Home","title":"KuMo.job","text":"job(backend::Int, containers::Int, data_location::Int, duration::Float64, frontend::Int)\n\nMethod to create new jobs.\n\n\n\n\n\n","category":"method"},{"location":"#KuMo.job_distributions-Tuple{}","page":"Home","title":"KuMo.job_distributions","text":"job_distributions(; backend, container, data_locations, duration, frontend)\n\nConstruct a dictionary with random distributions to generate new jobs.\n\n\n\n\n\n","category":"method"},{"location":"#KuMo.mincost_flow","page":"Home","title":"KuMo.mincost_flow","text":"mincost_flow\n\nCall the internal mincost_flow method.\n\n\n\n\n\n","category":"function"},{"location":"#KuMo.pseudo_cost","page":"Home","title":"KuMo.pseudo_cost","text":"pseudo_cost(cap, charge, resource, param...)\npseudo_cost(r::<:AbstractResource, charge)\n\nMethods to compute the pseudo-cost of various resources.\n\n\n\n\n\n","category":"function"},{"location":"#KuMo.rand_job-Tuple{Any}","page":"Home","title":"KuMo.rand_job","text":"rand_job(jd::Dict)\n\nCreate a random job given a job_distribution dictionary.\n\n\n\n\n\n","category":"method"},{"location":"#KuMo.vtx-Tuple{MinCostFlow}","page":"Home","title":"KuMo.vtx","text":"vtx(algorithm::AbstractAlgorithm)\n\nReturn the number of additional vertices required by the algorithm used to allocate resources in the network.\n\n\n\n\n\n","category":"method"}]
}
